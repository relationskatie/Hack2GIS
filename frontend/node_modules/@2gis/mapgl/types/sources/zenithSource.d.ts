import { Map } from '../map';
import { SourceAttributes, ZenithSourceOptions, FeatureStateMap, BinaryFeatureStateMap } from '../types';
/**
 * Class representing Zenith data source.
 */
export declare class ZenithSource {
    private options;
    static tileTemplateUrl: string;
    static metatileTemplateUrl: string;
    /**
     * Example:
     * ```js
     * const customZenithSource = new mapgl._J.ZenithSource(map, {
     *   tileTemplateUrl: `${mapgl._J.ZenithSource.tileTemplateUrl}&user_layer_id=${id}`
     *   metatileTemplateUrl: `mapgl._J.ZenithSource.metatileTemplateUrl`
     *   appId: map.state.appId,
     *   tileServer: map.state.tileServer,
     *   tileSet: map.state.tileSet,
     *   tileProtocol: map.state.tileProtocol,
     *   tileKey: map.state.tileKey,
     *   subdomains: map.state.subdomains,
     *   sourceAttributes: {
     *     sourceName: 'zenith-custom-source',
     *   }
     * });
     *
     * map.setStyle({
     *   // ...
     *   layers: [
     *     // ...
     *     filter: [
     *       'all',
     *       ['match', ['sourceAttr', 'sourceName'], ['zenith-custom-source'], true, false]
     *       // ...
     *     ]
     *   ]
     * })
     * ```
     * @param map The map instance
     * @param options Zenith source options
     */
    constructor(map: Map, options: ZenithSourceOptions);
    /**
     * Destroys the source
     */
    destroy(): void;
    /**
     * Sets the source attributes
     */
    setAttributes(attributes: SourceAttributes): this;
    /**
     * Gets the source attributes
     */
    getAttributes(): SourceAttributes;
    /**
     * Sets the feature state map to the source.
     *
     * See {@link DefaultSource.setFeatureStateMap}
     */
    setFeatureStateMap(featureStateMap: FeatureStateMap | BinaryFeatureStateMap): void;
    private prepareOptions;
}
