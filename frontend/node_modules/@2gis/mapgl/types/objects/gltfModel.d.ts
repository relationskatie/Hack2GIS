import { Evented } from '../utils/evented';
import { DynamicObjectEventTable } from '../types/events';
import { Map } from '../map';
import { GltfModelOptions, GltfModelTransformationOptions } from '../types';
/**
 * Class creating a GltfModel instance on the map.
 *
 * @hidden
 */
export declare class GltfModel extends Evented<DynamicObjectEventTable<GltfModel>> {
    /**
     * User specific data. Empty by default.
     */
    userData: any;
    /**
     * Example:
     * ```js
     * const gltfModel = new mapgl.GltfModel(map, {
     *     coordinates: [82.878543, 54.975937],
     *     modelSrc: '//absolute_path_to_gltf_model'
     * });
     * ```
     * @param map The map instance
     * @param options GltfModel options
     */
    constructor(map: Map, options: GltfModelOptions);
    /**
     * Destroys the model
     *
     * @param keepModel Specifies whether model data should be cached
     */
    destroy(keepModel?: boolean): void;
    /**
     * Hides the model
     */
    hide(): void;
    /**
     * Shows the model
     */
    show(): void;
    /**
     * Transforms the model
     *
     * @param transformations An array of transformation options
     */
    transform(transformations: GltfModelTransformationOptions[]): void;
    /**
     * Stops ongoing model transformations
     */
    stopTransformation(): void;
    /**
     * Returns geographical coordinates `[longitude, latitude]` of the model
     */
    getCoordinates(): number[];
    /**
     * Returns scale `[x, y, z]` of the model
     */
    getScale(): number[];
    /**
     * Returns rotation `[x, y, z]` of the model in degrees
     */
    getRotation(): number[];
    /**
     * Returns offset `[x, y, z]` of the model in meters
     */
    getOffset(): number[];
    private _emitPointerEvent;
}
