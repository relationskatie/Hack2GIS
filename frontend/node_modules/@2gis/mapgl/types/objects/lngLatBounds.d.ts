/**
 * Geographical bounds.
 */
export interface LngLatBounds {
    /**
     * The south-west point of the bounds `[longitude, latitude]`.
     */
    southWest: number[];
    /**
     * The north-east point of the bounds `[longitude, latitude]`.
     */
    northEast: number[];
}
/**
 * A `LngLatBoundsClass` class represents a geographical bounding box (LngLatBounds),
 * defined by its southwest and northeast points in longitude and latitude
 * with some additional methods
 */
export declare class LngLatBoundsClass implements LngLatBounds {
    /**
     * The south-west point of the bounds `[longitude, latitude]`.
     */
    southWest: number[];
    /**
     * The north-east point of the bounds `[longitude, latitude]`.
     */
    northEast: number[];
    /**
     * Example:
     * ```js
     * const lngLatBounds = new mapgl.LngLatBoundsClass({
     *   southWest: [0, 0],
     *   northEast: [1, 1],
     * });
     * ```
     * @param params southWest and northEast points
     */
    constructor(params: {
        southWest: number[];
        northEast: number[];
    });
    /**
     * Extend the bounds to include a given point.
     * @param point The geographical coordinates `[lng, lat]`.
     */
    extend(point: number[]): this;
    /**
     * Returns the center point of the geographical bounding box.
     */
    getCenter(): number[];
    /**
     * Returns true if the geographical bounding box contains the point.
     *
     * @param point Point to check.
     */
    containsPoint(point: number[]): boolean;
    /**
     * Returns true if the geographical bounding box contains the bounds entirely.
     *
     * Note that two equal bounds contain each other.
     *
     * Example to check overlapping:
     * ```js
     * const bounds = new mapgl.LngLatBoundsClass({
     *   southWest: [1, 1],
     *   northEast: [2, 2],
     * });
     * const biggerBounds = new mapgl.LngLatBoundsClass({
     *   southWest: [0.9, 0.9],
     *   northEast: [2.1, 2.1],
     * });
     *
     * // false: doesn't overlap but intersects (bounds.intersects(biggerBounds) === true)
     * const res1 = bounds.containsBounds(biggerBounds);
     *
     * // true: overlaps and intersects (biggerBounds.intersects(bounds) === true)
     * const res2 = biggerBounds.containsBounds(bounds);
     * ```
     *
     * @param bounds Bounds to check.
     */
    containsBounds(bounds: LngLatBounds): boolean;
    /**
     * Returns true if the geographical bounding box intersects the bounds.
     *
     * Note that two equal bounds intersect each other.
     *
     * @param bounds Bounds to check.
     */
    intersects(bounds: LngLatBounds): boolean;
}
