{"ast":null,"code":"var _jsxFileName = \"/Users/relationskatie/study_golang/Hackathon2GIS/frontend/src/Map2GIS.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { load } from '@2gis/mapgl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Map2GIS = ({\n  value\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapglAPIRef = useRef(null);\n  const mainMarkerRef = useRef(null);\n  const infraMarkersRef = useRef([]);\n\n  // Инициализация карты\n  useEffect(() => {\n    let isMounted = true;\n    load().then(mapglAPI => {\n      if (!isMounted) return;\n      mapglAPIRef.current = mapglAPI;\n      mapRef.current = new mapglAPI.Map('map-container', {\n        center: [37.618423, 55.751244],\n        // Москва\n        zoom: 13,\n        key: '8f104049-075f-4c47-817b-b8b450854d86'\n      });\n    });\n    return () => {\n      isMounted = false;\n      mapRef.current && mapRef.current.destroy();\n    };\n  }, []);\n  useEffect(() => {\n    if (!mapRef.current || !mapglAPIRef.current || !value) return;\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n    if (mainMarkerRef.current) {\n      mainMarkerRef.current.destroy();\n    }\n    infraMarkersRef.current.forEach(marker => marker.destroy());\n    infraMarkersRef.current = [];\n\n    // Рисуем главный маркер, если координаты есть\n    if (typeof value.lon === 'number' && typeof value.lat === 'number') {\n      mainMarkerRef.current = new mapglAPI.Marker(mapInstance, {\n        coordinates: [value.lon, value.lat],\n        color: '#ff0000',\n        icon: '/home.svg',\n        size: [35, 35],\n        label: {\n          text: value.name\n        }\n      });\n      mapInstance.setCenter([value.lon, value.lat]);\n    }\n\n    // Инфраструктура\n    if (value.map) {\n      Object.entries(value.map).forEach(([key, places]) => {\n        if (!Array.isArray(places)) return;\n        const icon = getIconByKey(key);\n        places.forEach(place => {\n          if (place && Array.isArray(place.coords) && typeof place.coords[0] === 'number' && typeof place.coords[1] === 'number') {\n            const marker = new mapglAPI.Marker(mapInstance, {\n              coordinates: place.coords,\n              color: '#0000ff',\n              icon: icon,\n              size: [35, 35],\n              label: {\n                text: place.name,\n                offset: [20, 0],\n                relativeAnchor: [0, 0.5]\n              }\n            });\n            infraMarkersRef.current.push(marker);\n          }\n        });\n      });\n    }\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\",\n    style: {\n      width: '100%',\n      height: '500px'\n    } // чтобы карта была видна\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Map2GIS, \"9lfRi+4BGNEY2QPnpsfZMhDCxC0=\");\n_c = Map2GIS;\nconst getIconByKey = key => {\n  const iconsMap = {\n    'Продукты': '/products.svg',\n    'Школы': '/school.svg',\n    'Детские сады': '/kindergarten.svg',\n    'Медицина': '/hospital.svg',\n    'Аптеки': '/farma.svg',\n    'Спорт': '/sport.svg',\n    'Культура': '/culture.svg',\n    'Бары': '/bar.svg'\n  };\n  return iconsMap[key];\n};\nvar _c;\n$RefreshReg$(_c, \"Map2GIS\");","map":{"version":3,"names":["React","useEffect","useRef","load","jsxDEV","_jsxDEV","Map2GIS","value","_s","mapRef","mapglAPIRef","mainMarkerRef","infraMarkersRef","isMounted","then","mapglAPI","current","Map","center","zoom","key","destroy","mapInstance","forEach","marker","lon","lat","Marker","coordinates","color","icon","size","label","text","name","setCenter","map","Object","entries","places","Array","isArray","getIconByKey","place","coords","offset","relativeAnchor","push","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","iconsMap","$RefreshReg$"],"sources":["/Users/relationskatie/study_golang/Hackathon2GIS/frontend/src/Map2GIS.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { load } from '@2gis/mapgl';\n\nexport const Map2GIS = ({ value }) => {\n  const mapRef = useRef(null);\n  const mapglAPIRef = useRef(null);\n  const mainMarkerRef = useRef(null);\n  const infraMarkersRef = useRef([]);\n\n  // Инициализация карты\n  useEffect(() => {\n    let isMounted = true;\n\n    load().then((mapglAPI) => {\n      if (!isMounted) return;\n\n      mapglAPIRef.current = mapglAPI;\n\n      mapRef.current = new mapglAPI.Map('map-container', {\n        center: [37.618423, 55.751244], // Москва\n        zoom: 13,\n        key: '8f104049-075f-4c47-817b-b8b450854d86',\n      });\n    });\n\n    return () => {\n      isMounted = false;\n      mapRef.current && mapRef.current.destroy();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!mapRef.current || !mapglAPIRef.current || !value) return;\n\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n\n    if (mainMarkerRef.current) {\n      mainMarkerRef.current.destroy();\n    }\n\n    infraMarkersRef.current.forEach(marker => marker.destroy());\n    infraMarkersRef.current = [];\n\n    // Рисуем главный маркер, если координаты есть\n    if (\n      typeof value.lon === 'number' &&\n      typeof value.lat === 'number'\n    ) {\n      mainMarkerRef.current = new mapglAPI.Marker(mapInstance, {\n        coordinates: [value.lon, value.lat],\n        color: '#ff0000',\n        icon: '/home.svg',\n        size: [35, 35],\n        label: { text: value.name },\n      });\n\n      mapInstance.setCenter([value.lon, value.lat]);\n    }\n\n    // Инфраструктура\n    if (value.map) {\n      Object.entries(value.map).forEach(([key, places]) => {\n        if (!Array.isArray(places)) return;\n        const icon = getIconByKey(key);\n\n        places.forEach((place) => {\n          if (\n            place &&\n            Array.isArray(place.coords) &&\n            typeof place.coords[0] === 'number' &&\n            typeof place.coords[1] === 'number'\n          ) {\n            const marker = new mapglAPI.Marker(mapInstance, {\n              coordinates: place.coords,\n              color: '#0000ff',\n              icon: icon,\n              size: [35, 35],\n              label: {\n                text: place.name,\n                offset: [20, 0],\n                relativeAnchor: [0, 0.5],\n              },\n            });\n            infraMarkersRef.current.push(marker);\n          }\n        });\n      });\n    }\n  }, [value]);\n\n  return (\n    <div\n      id=\"map-container\"\n      style={{ width: '100%', height: '500px' }} // чтобы карта была видна\n    ></div>\n  );\n};\n\nconst getIconByKey = (key) => {\n  const iconsMap = {\n    'Продукты': '/products.svg',\n    'Школы': '/school.svg',\n    'Детские сады': '/kindergarten.svg',\n    'Медицина': '/hospital.svg',\n    'Аптеки': '/farma.svg',\n    'Спорт': '/sport.svg',\n    'Культура': '/culture.svg',\n    'Бары': '/bar.svg',\n  };\n\n  return iconsMap[key];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}