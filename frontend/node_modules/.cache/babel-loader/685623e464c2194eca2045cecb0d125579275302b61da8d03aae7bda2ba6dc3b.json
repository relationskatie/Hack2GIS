{"ast":null,"code":"var _jsxFileName = \"/Users/relationskatie/study_golang/Hackathon2GIS/frontend/src/Map2GIS.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { load } from '@2gis/mapgl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Map2GIS = ({\n  value\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapglAPIRef = useRef(null);\n  const mainMarkerRef = useRef(null);\n  const infraMarkersRef = useRef([]);\n  const routeRef = useRef(null);\n  const [routePoints, setRoutePoints] = useState([]); // для кликов\n  const [routeCoords, setRouteCoords] = useState([]); // для маршрута с поворотами\n\n  // Загружаем карту\n  useEffect(() => {\n    load().then(mapglAPI => {\n      mapglAPIRef.current = mapglAPI;\n      mapRef.current = new mapglAPI.Map('map-container', {\n        center: [37.618423, 55.751244],\n        zoom: 13,\n        key: '8f104049-075f-4c47-817b-b8b450854d86'\n      });\n    });\n    return () => {\n      mapRef.current && mapRef.current.destroy();\n    };\n  }, []);\n\n  // Добавление маркеров\n  useEffect(() => {\n    if (!mapRef.current || !mapglAPIRef.current || !value) return;\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n    if (mainMarkerRef.current) mainMarkerRef.current.destroy();\n    infraMarkersRef.current.forEach(m => m.destroy());\n    infraMarkersRef.current = [];\n    mainMarkerRef.current = new mapglAPI.Marker(mapInstance, {\n      coordinates: [value.lon, value.lat],\n      icon: '/home.svg',\n      size: [35, 35],\n      label: {\n        text: value.name\n      }\n    });\n    mapInstance.setCenter([value.lon, value.lat]);\n    const handlePlaceClick = async coords => {\n      setRoutePoints(prev => {\n        const newPoints = [...prev, coords];\n        if (newPoints.length > 2) newPoints.shift();\n        return newPoints;\n      });\n      if (routePoints.length === 1) {\n        // Есть две точки → получаем маршрут через Routing API\n        const start = routePoints[0];\n        const end = coords;\n        const route = await fetchRoute(start, end);\n        setRouteCoords(route); // массив координат с поворотами\n      }\n    };\n    if (value.map) {\n      Object.entries(value.map).forEach(([key, places]) => {\n        if (!Array.isArray(places)) return;\n        const icon = getIconByKey(key);\n        places.forEach(place => {\n          const marker = new mapglAPI.Marker(mapInstance, {\n            coordinates: place.coords,\n            icon: icon,\n            size: [35, 35],\n            label: {\n              text: place.name,\n              offset: [20, 0],\n              relativeAnchor: [0, 0.5]\n            }\n          });\n          marker.on('click', () => handlePlaceClick(place.coords));\n          infraMarkersRef.current.push(marker);\n        });\n      });\n    }\n  }, [value, routePoints]);\n\n  // Отрисовка маршрута с поворотами\n  useEffect(() => {\n    if (!mapRef.current || !mapglAPIRef.current || routeCoords.length === 0) return;\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n    if (routeRef.current) routeRef.current.destroy();\n    routeRef.current = new mapglAPI.Polyline(mapInstance, {\n      coordinates: routeCoords,\n      color: '#ff0000',\n      width: 4\n    });\n  }, [routeCoords]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\",\n    style: {\n      width: '100%',\n      height: '500px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 10\n  }, this);\n};\n\n// Фейковая функция для запроса маршрута (замени на реальный Routing API)\n_s(Map2GIS, \"hRGvIQcaM4aI+qqsVcw7vB6736M=\");\n_c = Map2GIS;\nconst fetchRoute = async (start, end) => {\n  // Пример: здесь можно вызвать 2GIS Routing API и вернуть массив координат\n  // Формат: [[lon1, lat1], [lon2, lat2], ...] с поворотами маршрута\n  // Для демо — рисуем прямую с дополнительной точки-поворота\n  return [start, [(start[0] + end[0]) / 2 + 0.001, (start[1] + end[1]) / 2 + 0.001],\n  // поворот\n  end];\n};\nconst getIconByKey = key => {\n  const iconsMap = {\n    'Продукты': '/products.svg',\n    'Школы': '/school.svg',\n    'Детские сады': '/kindergarten.svg',\n    'Медицина': '/hospital.svg',\n    'Аптеки': '/farma.svg',\n    'Спорт': '/sport.svg',\n    'Культура': '/culture.svg',\n    'Бары': '/bar.svg'\n  };\n  return iconsMap[key];\n};\nvar _c;\n$RefreshReg$(_c, \"Map2GIS\");","map":{"version":3,"names":["React","useEffect","useRef","useState","load","jsxDEV","_jsxDEV","Map2GIS","value","_s","mapRef","mapglAPIRef","mainMarkerRef","infraMarkersRef","routeRef","routePoints","setRoutePoints","routeCoords","setRouteCoords","then","mapglAPI","current","Map","center","zoom","key","destroy","mapInstance","forEach","m","Marker","coordinates","lon","lat","icon","size","label","text","name","setCenter","handlePlaceClick","coords","prev","newPoints","length","shift","start","end","route","fetchRoute","map","Object","entries","places","Array","isArray","getIconByKey","place","marker","offset","relativeAnchor","on","push","Polyline","color","width","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","iconsMap","$RefreshReg$"],"sources":["/Users/relationskatie/study_golang/Hackathon2GIS/frontend/src/Map2GIS.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { load } from '@2gis/mapgl';\n\nexport const Map2GIS = ({ value }) => {\n  const mapRef = useRef(null);\n  const mapglAPIRef = useRef(null);\n  const mainMarkerRef = useRef(null);\n  const infraMarkersRef = useRef([]);\n  const routeRef = useRef(null);\n  const [routePoints, setRoutePoints] = useState([]); // для кликов\n  const [routeCoords, setRouteCoords] = useState([]); // для маршрута с поворотами\n\n  // Загружаем карту\n  useEffect(() => {\n    load().then((mapglAPI) => {\n      mapglAPIRef.current = mapglAPI;\n      mapRef.current = new mapglAPI.Map('map-container', {\n        center: [37.618423, 55.751244],\n        zoom: 13,\n        key: '8f104049-075f-4c47-817b-b8b450854d86',\n      });\n    });\n\n    return () => {\n      mapRef.current && mapRef.current.destroy();\n    };\n  }, []);\n\n  // Добавление маркеров\n  useEffect(() => {\n    if (!mapRef.current || !mapglAPIRef.current || !value) return;\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n\n    if (mainMarkerRef.current) mainMarkerRef.current.destroy();\n    infraMarkersRef.current.forEach(m => m.destroy());\n    infraMarkersRef.current = [];\n\n    mainMarkerRef.current = new mapglAPI.Marker(mapInstance, {\n      coordinates: [value.lon, value.lat],\n      icon: '/home.svg',\n      size: [35, 35],\n      label: { text: value.name },\n    });\n\n    mapInstance.setCenter([value.lon, value.lat]);\n\n    const handlePlaceClick = async (coords) => {\n      setRoutePoints(prev => {\n        const newPoints = [...prev, coords];\n        if (newPoints.length > 2) newPoints.shift();\n        return newPoints;\n      });\n\n      if (routePoints.length === 1) {\n        // Есть две точки → получаем маршрут через Routing API\n        const start = routePoints[0];\n        const end = coords;\n        const route = await fetchRoute(start, end);\n        setRouteCoords(route); // массив координат с поворотами\n      }\n    };\n\n    if (value.map) {\n      Object.entries(value.map).forEach(([key, places]) => {\n        if (!Array.isArray(places)) return;\n        const icon = getIconByKey(key);\n\n        places.forEach(place => {\n          const marker = new mapglAPI.Marker(mapInstance, {\n            coordinates: place.coords,\n            icon: icon,\n            size: [35, 35],\n            label: { text: place.name, offset: [20, 0], relativeAnchor: [0, 0.5] },\n          });\n          marker.on('click', () => handlePlaceClick(place.coords));\n          infraMarkersRef.current.push(marker);\n        });\n      });\n    }\n  }, [value, routePoints]);\n\n  // Отрисовка маршрута с поворотами\n  useEffect(() => {\n    if (!mapRef.current || !mapglAPIRef.current || routeCoords.length === 0) return;\n\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n\n    if (routeRef.current) routeRef.current.destroy();\n\n    routeRef.current = new mapglAPI.Polyline(mapInstance, {\n      coordinates: routeCoords,\n      color: '#ff0000',\n      width: 4,\n    });\n  }, [routeCoords]);\n\n  return <div id=\"map-container\" style={{ width: '100%', height: '500px' }}></div>;\n};\n\n// Фейковая функция для запроса маршрута (замени на реальный Routing API)\nconst fetchRoute = async (start, end) => {\n  // Пример: здесь можно вызвать 2GIS Routing API и вернуть массив координат\n  // Формат: [[lon1, lat1], [lon2, lat2], ...] с поворотами маршрута\n  // Для демо — рисуем прямую с дополнительной точки-поворота\n  return [\n    start,\n    [(start[0] + end[0]) / 2 + 0.001, (start[1] + end[1]) / 2 + 0.001], // поворот\n    end\n  ];\n};\n\nconst getIconByKey = (key) => {\n  const iconsMap = {\n    'Продукты': '/products.svg',\n    'Школы': '/school.svg',\n    'Детские сады': '/kindergarten.svg',\n    'Медицина': '/hospital.svg',\n    'Аптеки': '/farma.svg',\n    'Спорт': '/sport.svg',\n    'Культура': '/culture.svg',\n    'Бары': '/bar.svg',\n  };\n  return iconsMap[key];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}