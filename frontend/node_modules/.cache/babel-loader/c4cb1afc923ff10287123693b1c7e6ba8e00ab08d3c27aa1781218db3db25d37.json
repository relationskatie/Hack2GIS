{"ast":null,"code":"var _jsxFileName = \"/Users/relationskatie/study_golang/Hackathon2GIS/frontend/src/Map2GIS.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { load } from '@2gis/mapgl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Map2GIS = ({\n  value\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapglAPIRef = useRef(null);\n  const mainMarkerRef = useRef(null);\n  const infraMarkersRef = useRef([]);\n  const routeRef = useRef(null); // для линии маршрута\n  const [routePoints, setRoutePoints] = useState([]); // хранение 2 точек\n\n  // Загружаем карту один раз\n  useEffect(() => {\n    let isMounted = true;\n    load().then(mapglAPI => {\n      if (!isMounted) return;\n      mapglAPIRef.current = mapglAPI;\n      mapRef.current = new mapglAPI.Map('map-container', {\n        center: [37.618423, 55.751244],\n        zoom: 13,\n        key: '8f104049-075f-4c47-817b-b8b450854d86'\n      });\n    });\n    return () => {\n      isMounted = false;\n      mapRef.current && mapRef.current.destroy();\n    };\n  }, []);\n\n  // Обновление маркеров и маршрута\n  useEffect(() => {\n    if (!mapRef.current || !mapglAPIRef.current || !value) return;\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n\n    // Удаляем старый главный маркер\n    if (mainMarkerRef.current) mainMarkerRef.current.destroy();\n\n    // Удаляем маркеры инфраструктуры\n    infraMarkersRef.current.forEach(marker => marker.destroy());\n    infraMarkersRef.current = [];\n\n    // Добавляем главный маркер\n    mainMarkerRef.current = new mapglAPI.Marker(mapInstance, {\n      coordinates: [value.lon, value.lat],\n      color: '#ff0000',\n      icon: '/home.svg',\n      size: [35, 35],\n      label: {\n        text: value.name\n      }\n    });\n    mapInstance.setCenter([value.lon, value.lat]);\n\n    // Обработчик клика на маркеры инфраструктуры\n    const handlePlaceClick = coords => {\n      setRoutePoints(prev => {\n        const newPoints = [...prev, coords];\n        if (newPoints.length > 2) newPoints.shift(); // оставляем только последние 2 точки\n        return newPoints;\n      });\n    };\n\n    // Добавляем маркеры инфраструктуры\n    if (value.map) {\n      Object.entries(value.map).forEach(([key, places]) => {\n        if (!Array.isArray(places)) return;\n        const icon = getIconByKey(key);\n        places.forEach(place => {\n          const marker = new mapglAPI.Marker(mapInstance, {\n            coordinates: place.coords,\n            color: '#0000ff',\n            icon: icon,\n            size: [35, 35],\n            label: {\n              text: place.name,\n              offset: [20, 0],\n              relativeAnchor: [0, 0.5]\n            }\n          });\n          marker.on('click', () => handlePlaceClick(place.coords)); // добавляем клик\n          infraMarkersRef.current.push(marker);\n        });\n      });\n    }\n  }, [value]);\n\n  // Рисуем маршрут при обновлении routePoints\n  useEffect(() => {\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n    if (!mapInstance || !mapglAPI) return;\n    if (routePoints.length < 2) {\n      if (routeRef.current) {\n        routeRef.current.destroy(); // удаляем старый маршрут\n        routeRef.current = null;\n      }\n      return;\n    }\n\n    // Удаляем старый маршрут\n    if (routeRef.current) routeRef.current.destroy();\n\n    // Создаем новый маршрут (Polyline)\n    routeRef.current = new mapglAPI.Polyline(mapInstance, {\n      coordinates: routePoints,\n      // [[lon1, lat1], [lon2, lat2]]\n      color: '#ff0000',\n      width: 4\n    });\n  }, [routePoints]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-container\",\n    style: {\n      width: '100%',\n      height: '500px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 10\n  }, this);\n};\n\n// Функция для выбора иконки по категории\n_s(Map2GIS, \"y+ljlqxi91SQZ5dEEqtJcMiPupU=\");\n_c = Map2GIS;\nconst getIconByKey = key => {\n  const iconsMap = {\n    'Продукты': '/products.svg',\n    'Школы': '/school.svg',\n    'Детские сады': '/kindergarten.svg',\n    'Медицина': '/hospital.svg',\n    'Аптеки': '/farma.svg',\n    'Спорт': '/sport.svg',\n    'Культура': '/culture.svg',\n    'Бары': '/bar.svg'\n  };\n  return iconsMap[key];\n};\nvar _c;\n$RefreshReg$(_c, \"Map2GIS\");","map":{"version":3,"names":["React","useEffect","useRef","useState","load","jsxDEV","_jsxDEV","Map2GIS","value","_s","mapRef","mapglAPIRef","mainMarkerRef","infraMarkersRef","routeRef","routePoints","setRoutePoints","isMounted","then","mapglAPI","current","Map","center","zoom","key","destroy","mapInstance","forEach","marker","Marker","coordinates","lon","lat","color","icon","size","label","text","name","setCenter","handlePlaceClick","coords","prev","newPoints","length","shift","map","Object","entries","places","Array","isArray","getIconByKey","place","offset","relativeAnchor","on","push","Polyline","width","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","iconsMap","$RefreshReg$"],"sources":["/Users/relationskatie/study_golang/Hackathon2GIS/frontend/src/Map2GIS.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { load } from '@2gis/mapgl';\n\nexport const Map2GIS = ({ value }) => {\n  const mapRef = useRef(null);\n  const mapglAPIRef = useRef(null);\n  const mainMarkerRef = useRef(null);\n  const infraMarkersRef = useRef([]);\n  const routeRef = useRef(null); // для линии маршрута\n  const [routePoints, setRoutePoints] = useState([]); // хранение 2 точек\n\n  // Загружаем карту один раз\n  useEffect(() => {\n    let isMounted = true;\n\n    load().then((mapglAPI) => {\n      if (!isMounted) return;\n\n      mapglAPIRef.current = mapglAPI;\n\n      mapRef.current = new mapglAPI.Map('map-container', {\n        center: [37.618423, 55.751244],\n        zoom: 13,\n        key: '8f104049-075f-4c47-817b-b8b450854d86',\n      });\n    });\n\n    return () => {\n      isMounted = false;\n      mapRef.current && mapRef.current.destroy();\n    };\n  }, []);\n\n  // Обновление маркеров и маршрута\n  useEffect(() => {\n    if (!mapRef.current || !mapglAPIRef.current || !value) return;\n\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n\n    // Удаляем старый главный маркер\n    if (mainMarkerRef.current) mainMarkerRef.current.destroy();\n\n    // Удаляем маркеры инфраструктуры\n    infraMarkersRef.current.forEach(marker => marker.destroy());\n    infraMarkersRef.current = [];\n\n    // Добавляем главный маркер\n    mainMarkerRef.current = new mapglAPI.Marker(mapInstance, {\n      coordinates: [value.lon, value.lat],\n      color: '#ff0000',\n      icon: '/home.svg',\n      size: [35, 35],\n      label: { text: value.name },\n    });\n\n    mapInstance.setCenter([value.lon, value.lat]);\n\n    // Обработчик клика на маркеры инфраструктуры\n    const handlePlaceClick = (coords) => {\n      setRoutePoints(prev => {\n        const newPoints = [...prev, coords];\n        if (newPoints.length > 2) newPoints.shift(); // оставляем только последние 2 точки\n        return newPoints;\n      });\n    };\n\n    // Добавляем маркеры инфраструктуры\n    if (value.map) {\n      Object.entries(value.map).forEach(([key, places]) => {\n        if (!Array.isArray(places)) return;\n        const icon = getIconByKey(key);\n\n        places.forEach((place) => {\n          const marker = new mapglAPI.Marker(mapInstance, {\n            coordinates: place.coords,\n            color: '#0000ff',\n            icon: icon,\n            size: [35, 35],\n            label: {\n              text: place.name,\n              offset: [20, 0],\n              relativeAnchor: [0, 0.5],\n            },\n          });\n\n          marker.on('click', () => handlePlaceClick(place.coords)); // добавляем клик\n          infraMarkersRef.current.push(marker);\n        });\n      });\n    }\n  }, [value]);\n\n  // Рисуем маршрут при обновлении routePoints\n  useEffect(() => {\n    const mapInstance = mapRef.current;\n    const mapglAPI = mapglAPIRef.current;\n\n    if (!mapInstance || !mapglAPI) return;\n    if (routePoints.length < 2) {\n      if (routeRef.current) {\n        routeRef.current.destroy(); // удаляем старый маршрут\n        routeRef.current = null;\n      }\n      return;\n    }\n\n    // Удаляем старый маршрут\n    if (routeRef.current) routeRef.current.destroy();\n\n    // Создаем новый маршрут (Polyline)\n    routeRef.current = new mapglAPI.Polyline(mapInstance, {\n      coordinates: routePoints, // [[lon1, lat1], [lon2, lat2]]\n      color: '#ff0000',\n      width: 4,\n    });\n  }, [routePoints]);\n\n  return <div id=\"map-container\" style={{ width: '100%', height: '500px' }}></div>;\n};\n\n// Функция для выбора иконки по категории\nconst getIconByKey = (key) => {\n  const iconsMap = {\n    'Продукты': '/products.svg',\n    'Школы': '/school.svg',\n    'Детские сады': '/kindergarten.svg',\n    'Медицина': '/hospital.svg',\n    'Аптеки': '/farma.svg',\n    'Спорт': '/sport.svg',\n    'Культура': '/culture.svg',\n    'Бары': '/bar.svg',\n  };\n\n  return iconsMap[key];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}