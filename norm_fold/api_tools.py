import requests
import time

CATEGORIES = [
    "–ü—Ä–æ–¥—É–∫—Ç—ã",
    "–®–∫–æ–ª—ã",
    "–î–µ—Ç—Å–∫–∏–µ —Å–∞–¥—ã",
    "–ú–µ–¥–∏—Ü–∏–Ω–∞",
    "–ê–ø—Ç–µ–∫–∏",
    "–°–ø–æ—Ä—Ç",
    "–ö—É–ª—å—Ç—É—Ä–∞",
    "–ë–∞—Ä—ã",
]

API_URL = "https://catalog.api.2gis.com/3.0/items"
API_KEY = "8f104049-075f-4c47-817b-b8b450854d86"  # üîë —Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–ª—é—á 2GIS


def count_nearby_places(homes: list[dict], homes_for_front):
    print(len(homes), len(homes_for_front), "%%%")
    print(homes_for_front)
    """
    –î–ª—è –∫–∞–∂–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å—á–∏—Ç–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ (—Ä–∞–¥–∏—É—Å 1 –∫–º).
    """
    result_map = {}

    for i in range(len(homes)):
        home = homes[i]
        lat = home.get("lat")
        lon = home.get("lon")
        url = home.get("url") or "unknown"

        if not lat or not lon:
            print(f"‚ö† –ü—Ä–æ–ø—É—â–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è: {url}")
            continue

        category_counts = {}

        for category in CATEGORIES:
            params = {
                "q": category,
                "point": f"{lon},{lat}",  
                "radius": 1000,
                "location": f"{lon},{lat}",
                "sort": "distance",
                "key": API_KEY,
                "locale": "ru_RU"
            }

            try:
                response = requests.get(API_URL, params=params, timeout=10)
                response.raise_for_status()
                data = response.json()

                total = data.get("result", {}).get("total", 0)
                items = data.get("result", {}).get("items")
                print(items)

                category_counts[category] = total

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if items:
                    catgrs = [item for item in items]
                    if len(catgrs) > 3:
                        homes_for_front[i]["map"][category] = [catgrs[0], catgrs[1], catgrs[2]]
                    elif len(catgrs) == 2:
                        homes_for_front[i]["map"][category] = [catgrs[0], catgrs[1]]
                    elif len(catgrs) == 1:
                        homes_for_front[i]["map"][category] = [catgrs[0]]
                    #homes_for_front[i]["map"][category]["points"] =

                else:
                    homes_for_front[i]["map"][category] = None  # –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å {}

            except requests.RequestException as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
                category_counts[category] = 0

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ rate limit
            time.sleep(0.3)

        result_map[url] = category_counts

    return {"result_map": result_map, "homes_for_front": homes_for_front}
